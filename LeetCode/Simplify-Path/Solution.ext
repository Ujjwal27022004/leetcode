class Solution {
    public String simplifyPath(String path) {
        Stack<String> s1 = new Stack<>();
        Stack<String> s2 = new Stack<>();
        int i = 0;
        int prev = 0;
        path = path + "/";
        while (i != path.length()) {
            if (path.charAt(i) == '/') {
                String subpath = path.substring(prev, i);
                if (!subpath.equals("") && !subpath.equals("/")) {
                    if(subpath.equals("..") && !s1.isEmpty()){
                        s1.pop();
                    }else if(subpath.equals(".")){

                    }else{
                    s1.push(subpath);
                    }
                }
                prev = i + 1;
            }
            i++;
        }

        while(!s1.isEmpty()){
            if(s1.peek().equals(".")){
                s1.pop();
            }else if( s1.peek().equals("..")){
                s1.pop();
                if(!s1.isEmpty()){
                s1.pop();
                }
            }else{
                s2.push(s1.pop());
            }
        }

        StringBuilder actual = new StringBuilder();
        while(!s2.isEmpty()){
            actual.append("/");
            actual.append(s2.pop());
        }
        if(actual.toString().equals("")){
            return "/";
        }
        return actual.toString();

    }
}